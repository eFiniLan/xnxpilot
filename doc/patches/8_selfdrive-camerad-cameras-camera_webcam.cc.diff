diff --git a/selfdrive/camerad/cameras/camera_webcam.cc b/selfdrive/camerad/cameras/camera_webcam.cc
index f4204146..f840d925 100644
--- a/selfdrive/camerad/cameras/camera_webcam.cc
+++ b/selfdrive/camerad/cameras/camera_webcam.cc
@@ -21,6 +21,12 @@
 const int ROAD_CAMERA_ID = getenv("ROADCAM_ID") ? atoi(getenv("ROADCAM_ID")) : 1;
 const int DRIVER_CAMERA_ID = getenv("DRIVERCAM_ID") ? atoi(getenv("DRIVERCAM_ID")) : 2;
 
+/*
+#define FRAME_WIDTH  1164
+#define FRAME_HEIGHT 874
+#define FRAME_WIDTH_FRONT  1152
+#define FRAME_HEIGHT_FRONT 864
+*/
 #define FRAME_WIDTH  1164
 #define FRAME_HEIGHT 874
 #define FRAME_WIDTH_FRONT  1152
@@ -48,7 +54,13 @@ CameraInfo cameras_supported[CAMERA_ID_MAX] = {
       .bayer_flip = false,
   },
 };
-
+std::string gstreamer_pipeline(int sensor_id, int capture_width, int capture_height, int framerate, int flip_method, int display_width, int display_height) {
+//    return "nvarguscamerasrc sensor_mode=4 sensor-id=" + std::to_string(sensor_id) + " ! video/x-raw(memory:NVMM), width=3264, height=2464, framerate=(fraction)" + std::to_string(framerate) + "/1, format=(string)NV12 ! nvvidconv flip-method=2 ! video/x-raw, format=(string)BGRx ! videoconvert ! video/x-raw, format=(string)BGR ! videoscale ! video/x-raw,width=" + std::to_string(width) + ",height=" + std::to_string(height) + " ! appsink";
+    return "nvarguscamerasrc sensor_mode=2 sensor-id=" + std::to_string(sensor_id) + " ! video/x-raw(memory:NVMM), width=(int)" + std::to_string(capture_width) + ", height=(int)" +
+           std::to_string(capture_height) + ", format=(string)NV12, framerate=(fraction)" + std::to_string(framerate) +
+           "/1 ! nvvidconv flip-method=" + std::to_string(flip_method) + " ! video/x-raw, width=(int)" + std::to_string(display_width) + ", height=(int)" +
+           std::to_string(display_height) + ", format=(string)BGRx ! videoconvert ! video/x-raw, format=(string)BGR ! appsink";
+}
 void camera_open(CameraState *s, bool rear) {
   // empty
 }
@@ -96,12 +108,25 @@ void run_camera(CameraState *s, cv::VideoCapture &video_cap, float *ts) {
 static void road_camera_thread(CameraState *s) {
   set_thread_name("webcam_road_camera_thread");
 
-  cv::VideoCapture cap_road(ROAD_CAMERA_ID, cv::CAP_V4L2); // road
-  cap_road.set(cv::CAP_PROP_FRAME_WIDTH, 853);
-  cap_road.set(cv::CAP_PROP_FRAME_HEIGHT, 480);
-  cap_road.set(cv::CAP_PROP_FPS, s->fps);
-  cap_road.set(cv::CAP_PROP_AUTOFOCUS, 0); // off
-  cap_road.set(cv::CAP_PROP_FOCUS, 0); // 0 - 255?
+  std::string pipeline = gstreamer_pipeline(
+        0,
+        1920,
+	1280,
+        s->fps,
+        2,
+        800,
+        600);
+
+  cv::VideoCapture cap_road(pipeline, cv::CAP_GSTREAMER); // road
+
+  std::cout << "Using pipeline: \n\t" << pipeline << "\n";
+
+//  cv::VideoCapture cap_road(ROAD_CAMERA_ID, cv::CAP_V4L2); // road
+  //cap_road.set(cv::CAP_PROP_FRAME_WIDTH, 853);
+  //cap_road.set(cv::CAP_PROP_FRAME_HEIGHT, 480);
+  //cap_road.set(cv::CAP_PROP_FPS, s->fps);
+  //cap_road.set(cv::CAP_PROP_AUTOFOCUS, 0); // off
+  //cap_road.set(cv::CAP_PROP_FOCUS, 0); // 0 - 255?
   // cv::Rect roi_rear(160, 0, 960, 720);
 
   // transforms calculation see tools/webcam/warp_vis.py
@@ -117,10 +142,25 @@ static void road_camera_thread(CameraState *s) {
 }
 
 void driver_camera_thread(CameraState *s) {
-  cv::VideoCapture cap_driver(DRIVER_CAMERA_ID, cv::CAP_V4L2); // driver
-  cap_driver.set(cv::CAP_PROP_FRAME_WIDTH, 853);
-  cap_driver.set(cv::CAP_PROP_FRAME_HEIGHT, 480);
-  cap_driver.set(cv::CAP_PROP_FPS, s->fps);
+
+  std::string pipeline = gstreamer_pipeline(
+        1,
+	1920,
+        1280,
+        s->fps,
+        2,
+        800,
+        600);
+
+  cv::VideoCapture cap_driver(pipeline, cv::CAP_GSTREAMER); // road
+
+  std::cout << "Using pipeline: \n\t" << pipeline << "\n";
+
+
+//  cv::VideoCapture cap_driver(DRIVER_CAMERA_ID, cv::CAP_V4L2); // driver
+  //cap_driver.set(cv::CAP_PROP_FRAME_WIDTH, 853);
+  //cap_driver.set(cv::CAP_PROP_FRAME_HEIGHT, 480);
+  //cap_driver.set(cv::CAP_PROP_FPS, s->fps);
   // cv::Rect roi_front(320, 0, 960, 720);
 
   // transforms calculation see tools/webcam/warp_vis.py
